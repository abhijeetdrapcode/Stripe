<!DOCTYPE html>
<html>
  <head>
    <meta charset="utf-8" />
    <meta name="viewport" content="width=device-width, initial-scale=1" />
    <title>Connect US Bank Account</title>
    <script src="https://js.stripe.com/v3/"></script>
    <style>
      body { font-family: Arial, sans-serif; line-height: 1.6; padding: 20px; }
      #payment-form { max-width: 400px; margin: 0 auto; }
      #payment-element { margin-bottom: 20px; }
      button { background-color: #4CAF50; color: white; padding: 10px 20px; border: none; cursor: pointer; }
      #error-message { color: red; margin-top: 10px; }
      #account-details { margin-top: 20px; }
    </style>
  </head>
  <body>
    <main>
      <h1>Connect US Bank Account</h1>
      <form id="payment-form">
        <div id="payment-element"></div>
        <button id="submit">Connect Account</button>
        <div id="error-message"></div>
      </form>
      <div id="account-details"></div>
    </main>
    <script>
      const stripe = Stripe('<%= publishableKey %>');
      let elements;
      let customerId;

      document.addEventListener('DOMContentLoaded', initialize);
      document.querySelector("#payment-form").addEventListener("submit", handleSubmit);

      async function initialize() {
        try {
          let response = await fetch("http://localhost:3001/");
          if (!response.ok) {
            throw new Error('Failed to create customer');
          }
          
          const { clientSecret, customer } = await response.json();
          console.log(clientSecret);
          customerId = customer;

          const appearance = {
            theme: 'stripe',
          };
          
          elements = stripe.elements({ appearance, clientSecret });

          const paymentElement = elements.create("payment");
          paymentElement.mount("#payment-element");
        } catch (error) {
          console.error('Initialization error:', error);
          showError('Failed to initialize. Please try again.');
        }
      }

      async function handleSubmit(e) {
        e.preventDefault();
        setLoading(true);

        try {
          const { error, setupIntent } = await stripe.confirmSetup({
            elements,
            redirect: 'if_required'
          });

          if (error) {
            throw error;
          } else {
            // If successful, retrieve account details
            await getAccountDetails();
          }
        } catch (error) {
          if (error.type === "card_error" || error.type === "validation_error") {
            showError(error.message);
          } else {
            showError("An unexpected error occurred.");
          }
        }
        setLoading(false);
      }

      async function getAccountDetails() {
        try {
          const response = await fetch(`http://localhost:3001/financial-accounts/${customerId}`);
          console.log("thisiscustomerid: ", customerId)
          if (!response.ok) {
            throw new Error('Failed to retrieve account details');
          }
          const data = await response.json();
          if (data.success) {
            displayAccountDetails(data.accountDetails);
          } else {
            throw new Error('Failed to retrieve account details');
          }
        } catch (error) {
          console.error('Error retrieving account details:', error);
          showError('Failed to retrieve account details. Please try again.');
        }
      }

      function displayAccountDetails(details) {
        const accountDetailsDiv = document.querySelector("#account-details");
        accountDetailsDiv.innerHTML = '<h2>Connected Account Details:</h2>';
        details.forEach(account => {
          accountDetailsDiv.innerHTML += `
            <p>
              Bank: ${account.bankName}<br>
              Account Type: ${account.accountType}<br>
              Last 4 digits: ${account.last4}<br>
             Balance: ${account.balance} ${account.currency}
            </p>
          `;
        });
      }

      function showError(message) {
        const errorDiv = document.querySelector("#error-message");
        errorDiv.textContent = message;
        errorDiv.style.display = "block";
        setTimeout(() => {
          errorDiv.style.display = "none";
        }, 4000);
      }

      function setLoading(isLoading) {
        const submitButton = document.querySelector("#submit");
        submitButton.disabled = isLoading;
        submitButton.textContent = isLoading ? "Processing..." : "Connect Account";
      }
    </script>
  </body>
</html>